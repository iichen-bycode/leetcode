package 常用数据结构.前缀和;

/*
给你一个下标从 0 开始的整数数组nums 。每次操作中，你可以：

选择两个满足 0 <= i, j < nums.length 的不同下标 i 和 j 。
选择一个非负整数 k ，满足 nums[i] 和 nums[j] 在二进制下的第 k 位（下标编号从 0 开始）是 1 。
将 nums[i] 和 nums[j] 都减去 2k 。
如果一个子数组内执行上述操作若干次（包括 0 次）后，该子数组可以变成一个全为 0 的数组，那么我们称它是一个 美丽 的子数组。

请你返回数组 nums 中 美丽子数组 的数目。

子数组是一个数组中一段连续 非空 的元素序列。

注意：所有元素最初都是 0 的子数组被认为是美丽的，因为不需要进行任何操作。



示例 1：

输入：nums = [4,3,1,2,4]
 1 2 3 4 4

 0001
 0010
 0011
 0100
 0100

 0 2 2 2

 0001
 0010
 0011
 0011
 0011
 0100
 0100

 0 4 4 2


 0 1 3 6 10 14
输出：2
解释：nums 中有 2 个美丽子数组：[4,3,1,2,4] 和 [4,3,1,2,4] 。
- 按照下述步骤，我们可以将子数组 [3,1,2] 中所有元素变成 0 ：
  - 选择 [3, 1, 2] 和 k = 1 。将 2 个数字都减去 2^1 ，子数组变成 [1, 1, 0] 。
  - 选择 [1, 1, 0] 和 k = 0 。将 2 个数字都减去 2^0 ，子数组变成 [0, 0, 0] 。
- 按照下述步骤，我们可以将子数组 [4,3,1,2,4] 中所有元素变成 0 ：
  - 选择 [4, 3, 1, 2, 4] 和 k = 2 。将 2 个数字都减去 2^2 ，子数组变成 [0, 3, 1, 2, 0] 。
  - 选择 [0, 3, 1, 2, 0] 和 k = 0 。将 2 个数字都减去 2^0 ，子数组变成 [0, 2, 0, 2, 0] 。
  - 选择 [0, 2, 0, 2, 0] 和 k = 1 。将 2 个数字都减去 2^1 ，子数组变成 [0, 0, 0, 0, 0] 。
示例 2：

输入：nums = [1,10,4]
    1 4 10
    0 1 5 15

    0001
    1010
    0100


输出：0
解释：nums 中没有任何美丽子数组。


提示：

1 <= nums.length <= 105
0 <= nums[i] <= 106
 */

import java.util.HashMap;

// 统计美丽子数组数目
public class leetcode_2588 {
    public static void main(String[] args) {
        System.out.println(beautifulSubarrays(new int[]{4, 3, 1, 2, 4}));
    }

    public static long beautifulSubarrays(int[] nums) {
        /*
            对于值：4,3,1,2,4 二进制
             0001
             0010
             0011
             0100
             0100 则每个值异或和为0既满足
         */
        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0, 1);
        long ans = 0;
        int s = 0;
        for (int num : nums) {
            s ^= num;
            ans += map.getOrDefault(s, 0);
            map.put(s, map.getOrDefault(s, 0) + 1);
        }
        return ans;
    }
}
